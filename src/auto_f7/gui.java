/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package auto_f7;

import static com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type.String;
import java.text.DateFormat;
import java.text.ParseException;
import javax.swing.JLabel;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Calendar;
import java.util.Date;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author Jimpop-WK
 */
public class gui extends javax.swing.JFrame {
    private Object DateTimeFormat;
    public boolean now_status;
    Thread thread_time = null;
    Thread thread_forloop = null;
    /**
     * Creates new form gui
     */
    public gui() {
        initComponents();
        dtime_upd();
        now_status = false;
        try {
            forloop_chk();
        } catch (AWTException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        switch_btn = new javax.swing.JToggleButton();
        now_text = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        start_time_text = new javax.swing.JTextField();
        end_time_text = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        log_text = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        switch_btn.setText("off");
        switch_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switch_btnActionPerformed(evt);
            }
        });

        now_text.setText("jLabel1");

        jLabel2.setText("開始時間");

        jLabel3.setText("結束時間");

        log_text.setColumns(20);
        log_text.setRows(5);
        jScrollPane1.setViewportView(log_text);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(now_text, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(switch_btn)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(start_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(end_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(switch_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(now_text, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(start_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(end_time_text, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void switch_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switch_btnActionPerformed
        if(now_status){
            now_status=false;
            switch_btn.setText("off");
            log_append("已關閉");
        }
        else{
            now_status=true;
            switch_btn.setText("on");
            log_append("已開啟");
        }
        
        
        
    }//GEN-LAST:event_switch_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }
    public void dtime_upd(){
          thread_time = new Thread(new Runnable(){       
              public void run() {
                while(true){
                    try {
                        Date dNow = new Date();
                        SimpleDateFormat now_str = new SimpleDateFormat ("yyyy/MM/dd HH:mm:ss");
                        now_text.setText(now_str.format(dNow));
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
              }
          });
          
        thread_time.setDaemon(true);
        thread_time.start();
    }
    public boolean forloop_chk() throws AWTException{

        thread_forloop=new Thread(new Runnable(){
            public void run(){
                while(true){
                    if(now_status){
                        Robot robot = null;
                        try {
                            robot = new Robot();
                        } catch (AWTException ex) {
                            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                        }
                            Date date = new Date();
                            Long now = date.getTime();

                            date = new Date(start_time_text.getText());
                            Long start = date.getTime();

                            date = new Date(end_time_text.getText());
                            Long end = date.getTime();

                            Long diff = now -start;
                            Long diff2 = now - end;
                            if(diff <= 15000 && diff >=0){
                               log_append("開始時間已按");
                                robot.keyPress(118);
                                robot.keyRelease(118);
                            }
                            if(diff2 <= 15000 && diff2 >=0){
                                log_append("結束時間已按");
                                robot.keyPress(118);
                                robot.keyRelease(118);
                            }
                            //start_time_text.setText(t);
                    }
                    try {
                        Thread.sleep(15000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        thread_forloop.setDaemon(true);
        thread_forloop.start();
        
        return true;
    }
    public void parser_time() throws ParseException{
        String strDateTime = start_time_text.getText();
        Date date = new Date(strDateTime);
        long timeMilli = date.getTime();
        String t = Long.toString(timeMilli);
        jLabel2.setText(t);
    }
    private boolean log_append(String text){
        String lt = log_text.getText();
         Date date = new Date();
         SimpleDateFormat now_str = new SimpleDateFormat ("yyyy/MM/dd HH:mm:ss");
         String dtime_text = now_str.format(date);
        log_text.setText(lt+dtime_text+":"+text+"\r\n");
        
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField end_time_text;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea log_text;
    private javax.swing.JLabel now_text;
    private javax.swing.JTextField start_time_text;
    private javax.swing.JToggleButton switch_btn;
    // End of variables declaration//GEN-END:variables
}
